merge (: framework {name: "mindspore", version: "2.0"});
merge (: module {framework: "mindspore", name: "mindspore", version: "2.0"});
match
 (m1: framework {name: "mindspore", version: "2.0"}),
 (m2: module {framework: "mindspore", name: "mindspore", version: "2.0"})
merge (m1) -[: classOfFramework {name: "mindspore"}]-> (m2);
merge (: operator {framework: "mindspore", name: "COOTensor", full_name: "mindspore.COOTensor", version: "2.0"});
match
 (m3: module {framework: "mindspore", name: "mindspore", version: "2.0"}),
 (m4: operator {framework: "mindspore", name: "COOTensor", full_name: "mindspore.COOTensor", version: "2.0"})
merge (m3) -[: operatorOfClass {name: "COOTensor"}]-> (m4);
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", parameter_order: 1, name: "indices", dtype_num: 1, dtype: "Tensor", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", dtype_order: 1, parameter_order: 1, name: "indices_1", dtype : "Tensor", default : ""});
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", parameter_order: 2, name: "values", dtype_num: 1, dtype: "Tensor", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", dtype_order: 1, parameter_order: 2, name: "values_1", dtype : "Tensor", default : ""});
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", parameter_order: 3, name: "shape", dtype_num: 1, dtype: "tuple(int)", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", dtype_order: 1, parameter_order: 3, name: "shape_1", dtype : "tuple(int)", default : ""});
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", parameter_order: 4, name: "coo_tensor", dtype_num: 1, dtype: "COOTensor", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", dtype_order: 1, parameter_order: 4, name: "coo_tensor_1", dtype : "COOTensor", default : ""});
merge (: return {framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", return_order: 1, name: "return", dtype: 1});
merge (: childReturn {framework: "mindspore", version: "2.0", operator: "mindspore.COOTensor", dtype_order: 1, return_order: 1, name: "return_1", dtype: "COOTensor"});
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.COOTensor", version: "2.0"}),
 (n11: parameter)
where n11.operator = 'mindspore.COOTensor' and n11.framework = 'mindspore' and n11.version = '2.0'
merge (m11) -[: parameterOfOperator {parameter_order: n11.parameter_order, name: n11.name}] -> (n11);
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.COOTensor", version: "2.0"}),
 (n11: input)
where n11.operator = 'mindspore.COOTensor' and n11.framework = 'mindspore' and n11.version = '2.0'
merge (m11) -[: inputOfOperator {input_order: n11.input_order, name: n11.name}] -> (n11);
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.COOTensor", version: "2.0"}),
 (n11: return)
where n11.operator = 'mindspore.COOTensor' and n11.framework = 'mindspore' and n11.version = '2.0'
merge (m11) -[: returnOfOperator {return_order: n11.return_order, name: n11.name}] -> (n11);
match
 (m11: parameter {framework: "mindspore", version: "2.0"}),
 (n11: childParameter {framework: "mindspore", version: "2.0"})
where n11.operator = 'mindspore.COOTensor' and m11.operator='mindspore.COOTensor' and n11.parameter_order=m11.parameter_order
merge (m11) -[: oneOfParameter {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
match
 (m11: input {framework: "mindspore", version: "2.0"}),
 (n11: childInput {framework: "mindspore", version: "2.0"})
where n11.operator = 'mindspore.COOTensor' and m11.operator='mindspore.COOTensor' and n11.input_order=m11.input_order
merge (m11) -[: oneOfInput {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
match
 (m11: return {framework: "mindspore", version: "2.0"}),
 (n11: childReturn {framework: "mindspore", version: "2.0"})
where n11.operator = 'mindspore.COOTensor' and m11.operator='mindspore.COOTensor' and n11.return_order=m11.return_order
merge (m11) -[: oneOfReturn {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
