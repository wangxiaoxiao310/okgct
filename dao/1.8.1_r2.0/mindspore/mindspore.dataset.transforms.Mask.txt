merge (: framework {name: "mindspore", version: "2.0"});
merge (: module {framework: "mindspore", name: "mindspore", version: "2.0"});
match
 (m1: framework {name: "mindspore", version: "2.0"}),
 (m2: module {framework: "mindspore", name: "mindspore", version: "2.0"})
merge (m1) -[: classOfFramework {name: "mindspore"}]-> (m2);
merge (: module {framework: "mindspore", name: "dataset", version: "2.0"});
match
 (m1: module {framework: "mindspore", name: "mindspore", version: "2.0"}),
 (m2: module {framework: "mindspore", name: "dataset", version: "2.0"})
merge (m1) -[: subClassOfClass {name: "dataset"}]-> (m2);
merge (: module {framework: "mindspore", name: "transforms", version: "2.0"});
match
 (m1: module {framework: "mindspore", name: "dataset", version: "2.0"}),
 (m2: module {framework: "mindspore", name: "transforms", version: "2.0"})
merge (m1) -[: subClassOfClass {name: "transforms"}]-> (m2);
merge (: operator {framework: "mindspore", name: "Mask", full_name: "mindspore.dataset.transforms.Mask", version: "2.0"});
match
 (m3: module {framework: "mindspore", name: "transforms", version: "2.0"}),
 (m4: operator {framework: "mindspore", name: "Mask", full_name: "mindspore.dataset.transforms.Mask", version: "2.0"})
merge (m3) -[: operatorOfClass {name: "Mask"}]-> (m4);
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", parameter_order: 1, name: "operator", dtype_num: 1, dtype: "Relational", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", dtype_order: 1, parameter_order: 1, name: "operator_1", dtype : "Relational", default : ""});
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", parameter_order: 2, name: "constant", dtype_num: 1, dtype: "Union[str, int, float, bool]", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", dtype_order: 1, parameter_order: 2, name: "constant_1", dtype : "Union[str, int, float, bool]", default : ""});
merge (: parameter {framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", parameter_order: 3, name: "dtype", dtype_num: 1, dtype: "mindspore.dtype", optional: "True", default: "mstype.bool_"});
merge (: childParameter  { framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", dtype_order: 1, parameter_order: 3, name: "dtype_1", dtype : "mindspore.dtype", default : "mstype.bool_"});
merge (: return {framework: "mindspore", version: "2.0", operator: "mindspore.dataset.transforms.Mask", return_order: 1, name: "return", dtype: 0});
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.dataset.transforms.Mask", version: "2.0"}),
 (n11: parameter)
where n11.operator = 'mindspore.dataset.transforms.Mask' and n11.framework = 'mindspore' and n11.version = '2.0'
merge (m11) -[: parameterOfOperator {parameter_order: n11.parameter_order, name: n11.name}] -> (n11);
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.dataset.transforms.Mask", version: "2.0"}),
 (n11: input)
where n11.operator = 'mindspore.dataset.transforms.Mask' and n11.framework = 'mindspore' and n11.version = '2.0'
merge (m11) -[: inputOfOperator {input_order: n11.input_order, name: n11.name}] -> (n11);
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.dataset.transforms.Mask", version: "2.0"}),
 (n11: return)
where n11.operator = 'mindspore.dataset.transforms.Mask' and n11.framework = 'mindspore' and n11.version = '2.0'
merge (m11) -[: returnOfOperator {return_order: n11.return_order, name: n11.name}] -> (n11);
match
 (m11: parameter {framework: "mindspore", version: "2.0"}),
 (n11: childParameter {framework: "mindspore", version: "2.0"})
where n11.operator = 'mindspore.dataset.transforms.Mask' and m11.operator='mindspore.dataset.transforms.Mask' and n11.parameter_order=m11.parameter_order
merge (m11) -[: oneOfParameter {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
match
 (m11: input {framework: "mindspore", version: "2.0"}),
 (n11: childInput {framework: "mindspore", version: "2.0"})
where n11.operator = 'mindspore.dataset.transforms.Mask' and m11.operator='mindspore.dataset.transforms.Mask' and n11.input_order=m11.input_order
merge (m11) -[: oneOfInput {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
match
 (m11: return {framework: "mindspore", version: "2.0"}),
 (n11: childReturn {framework: "mindspore", version: "2.0"})
where n11.operator = 'mindspore.dataset.transforms.Mask' and m11.operator='mindspore.dataset.transforms.Mask' and n11.return_order=m11.return_order
merge (m11) -[: oneOfReturn {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
