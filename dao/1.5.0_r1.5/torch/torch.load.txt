merge (: framework {name: "pytorch", version: "1.5.0"});
merge (: module {framework: "pytorch", name: "torch", version: "1.5.0"});
match
 (m1: framework {name: "pytorch", version: "1.5.0"}),
 (m2: module {framework: "pytorch", name: "torch", version: "1.5.0"})
merge (m1) -[: classOfFramework {name: "torch"}]-> (m2);
merge (: operator {framework: "pytorch", name: "load", full_name: "torch.load", version: "1.5.0"});
match
 (m3: module {framework: "pytorch", name: "torch", version: "1.5.0"}),
 (m4: operator {framework: "pytorch", name: "load", full_name: "torch.load", version: "1.5.0"})
merge (m3) -[: operatorOfClass {name: "load"}]-> (m4);
merge (: parameter {framework: "pytorch", version: "1.5.0", operator: "torch.load", parameter_order: 1, name: "f", dtype_num: 2, dtype: "file-like object", optional: "False", default: ""});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 1, parameter_order: 1, name: "f_1", dtype : "file-like object", default : ""});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 2, parameter_order: 1, name: "f_2", dtype : "string", default : ""});
merge (: parameter {framework: "pytorch", version: "1.5.0", operator: "torch.load", parameter_order: 2, name: "map_location", dtype_num: 4, dtype: "callable", optional: "True", default: "None"});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 1, parameter_order: 2, name: "map_location_1", dtype : "callable", default : "None"});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 2, parameter_order: 2, name: "map_location_2", dtype : "torch.device", default : ""});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 3, parameter_order: 2, name: "map_location_3", dtype : "string", default : ""});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 4, parameter_order: 2, name: "map_location_4", dtype : "dict", default : ""});
merge (: parameter {framework: "pytorch", version: "1.5.0", operator: "torch.load", parameter_order: 3, name: "pickle_module", dtype_num: 1, dtype: "module", optional: "True", default: "pickle"});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 1, parameter_order: 3, name: "pickle_module_1", dtype : "module", default : "pickle"});
merge (: parameter {framework: "pytorch", version: "1.5.0", operator: "torch.load", parameter_order: 4, name: "pickle_load_args", dtype_num: 1, dtype: "keyword arguments", optional: "False", default: ""});
merge (: childParameter  { framework: "pytorch", version: "1.5.0", operator: "torch.load", dtype_order: 1, parameter_order: 4, name: "pickle_load_args_1", dtype : "keyword arguments", default : ""});
match
 (m11: operator {framework: "pytorch", full_name: "torch.load", version: "1.5.0"}),
 (n11: parameter)
where n11.operator = 'torch.load' and n11.framework = 'pytorch' and n11.version = '1.5.0'
merge (m11) -[: parameterOfOperator {parameter_order: n11.parameter_order, name: n11.name}] -> (n11);
match
 (m11: operator {framework: "pytorch", full_name: "torch.load", version: "1.5.0"}),
 (n11: return)
where n11.operator = 'torch.load' and n11.framework = 'pytorch' and n11.version = '1.5.0'
merge (m11) -[: returnOfOperator {return_order: n11.return_order, name: n11.name}] -> (n11);
match
 (m11: parameter {framework: "pytorch", version: "1.5.0"}),
 (n11: childParameter {framework: "pytorch", version: "1.5.0"})
where n11.operator = 'torch.load' and m11.operator='torch.load' and n11.parameter_order=m11.parameter_order
merge (m11) -[: oneOfParameter {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
match
 (m11: return {framework: "pytorch", version: "1.5.0"}),
 (n11: childReturn {framework: "pytorch", version: "1.5.0"})
where n11.operator = 'torch.load' and m11.operator='torch.load' and n11.return_order=m11.return_order
merge (m11) -[: oneOfReturn {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
