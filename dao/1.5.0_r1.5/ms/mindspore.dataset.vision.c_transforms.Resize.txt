merge (: framework {name: "mindspore", version: "1.5"});
merge (: module {framework: "mindspore", name: "mindspore", version: "1.5"});
match
 (m1: framework {name: "mindspore", version: "1.5"}),
 (m2: module {framework: "mindspore", name: "mindspore", version: "1.5"})
merge (m1) -[: classOfFramework {name: "mindspore"}]-> (m2);
merge (: module {framework: "mindspore", name: "dataset", version: "1.5"});
match
 (m1: module {framework: "mindspore", name: "mindspore", version: "1.5"}),
 (m2: module {framework: "mindspore", name: "dataset", version: "1.5"})
merge (m1) -[: subClassOfClass {name: "dataset"}]-> (m2);
merge (: module {framework: "mindspore", name: "vision", version: "1.5"});
match
 (m1: module {framework: "mindspore", name: "dataset", version: "1.5"}),
 (m2: module {framework: "mindspore", name: "vision", version: "1.5"})
merge (m1) -[: subClassOfClass {name: "vision"}]-> (m2);
merge (: module {framework: "mindspore", name: "c_transforms", version: "1.5"});
match
 (m1: module {framework: "mindspore", name: "vision", version: "1.5"}),
 (m2: module {framework: "mindspore", name: "c_transforms", version: "1.5"})
merge (m1) -[: subClassOfClass {name: "c_transforms"}]-> (m2);
merge (: operator {framework: "mindspore", name: "Resize", full_name: "mindspore.dataset.vision.c_transforms.Resize", version: "1.5"});
match
 (m3: module {framework: "mindspore", name: "c_transforms", version: "1.5"}),
 (m4: operator {framework: "mindspore", name: "Resize", full_name: "mindspore.dataset.vision.c_transforms.Resize", version: "1.5"})
merge (m3) -[: operatorOfClass {name: "Resize"}]-> (m4);
merge (: parameter {framework: "mindspore", version: "1.5", operator: "mindspore.dataset.vision.c_transforms.Resize", parameter_order: 1, name: "size", dtype_num: 2, dtype: "int", optional: "False", default: ""});
merge (: childParameter  { framework: "mindspore", version: "1.5", operator: "mindspore.dataset.vision.c_transforms.Resize", dtype_order: 1, parameter_order: 1, name: "size_1", dtype : "int", default : ""});
merge (: childParameter  { framework: "mindspore", version: "1.5", operator: "mindspore.dataset.vision.c_transforms.Resize", dtype_order: 2, parameter_order: 1, name: "size_2", dtype : "sequence", default : ""});
merge (: parameter {framework: "mindspore", version: "1.5", operator: "mindspore.dataset.vision.c_transforms.Resize", parameter_order: 2, name: "interpolation", dtype_num: 1, dtype: "Inter mode", optional: "True", default: "Inter.LINEAR"});
merge (: childParameter  { framework: "mindspore", version: "1.5", operator: "mindspore.dataset.vision.c_transforms.Resize", dtype_order: 1, parameter_order: 2, name: "interpolation_1", dtype : "Inter mode", default : "Inter.LINEAR"});
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.dataset.vision.c_transforms.Resize", version: "1.5"}),
 (n11: parameter)
where n11.operator = 'mindspore.dataset.vision.c_transforms.Resize' and n11.framework = 'mindspore' and n11.version = '1.5'
merge (m11) -[: parameterOfOperator {parameter_order: n11.parameter_order, name: n11.name}] -> (n11);
match
 (m11: operator {framework: "mindspore", full_name: "mindspore.dataset.vision.c_transforms.Resize", version: "1.5"}),
 (n11: return)
where n11.operator = 'mindspore.dataset.vision.c_transforms.Resize' and n11.framework = 'mindspore' and n11.version = '1.5'
merge (m11) -[: returnOfOperator {return_order: n11.return_order, name: n11.name}] -> (n11);
match
 (m11: parameter {framework: "mindspore", version: "1.5"}),
 (n11: childParameter {framework: "mindspore", version: "1.5"})
where n11.operator = 'mindspore.dataset.vision.c_transforms.Resize' and m11.operator='mindspore.dataset.vision.c_transforms.Resize' and n11.parameter_order=m11.parameter_order
merge (m11) -[: oneOfParameter {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
match
 (m11: return {framework: "mindspore", version: "1.5"}),
 (n11: childReturn {framework: "mindspore", version: "1.5"})
where n11.operator = 'mindspore.dataset.vision.c_transforms.Resize' and m11.operator='mindspore.dataset.vision.c_transforms.Resize' and n11.return_order=m11.return_order
merge (m11) -[: oneOfReturn {dtype_order: n11.dtype_order, dtype: n11.dtype}] -> (n11);
